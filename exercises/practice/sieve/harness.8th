\ vim: ft=8th :
\ This is the test harness used by 8th for running unit-tests
\ To use it, create "8th" files in the "test" directory.  Then
\ just do "8th samples/test/harness.8th" to see the results.
\ In your test files, declare a new test like this:
\
\   test some great test
\       1 1 + 2 = okfail
\
\ This will make a new test called 'some great test', and the following code
\ will be run.  "okfail" will mark the test as having failed if "false" or 0 was
\ on TOS; otherwise the test passes.
\
\ The harness will print results of the tests after they've all run

needs utils/test
needs utils/args

\ files which have been specifically excluded or included:
[] var, excludes
[] var, includes

\ Return true if 's' contains any of the strings in 'a'
: contains \ s a -- flag
  swap >r
  (
    r@ swap s:search nip
    null? nip not or
  ) false a:reduce rdrop ;

\ filter 'a1' based on 'a2' returning 'a3'
: contains? \ a1 a2 T -- a3
  swap a:len 
  if
    >r 
    if   ( r@ contains )
    else ( r@ contains not )
    then a:filter rdrop 
  else 2drop
  then ;

: filter-files  \ a -- a
  ( f:dir? not ) a:filter
  \ if there are includes, only include them:
  includes @ true contains? 
  \ if there are excludes don't include them:
  excludes @ false contains? ;

: .help quote *
The test harness accepts the following options:
  -h          Print this help
  -f dir      Look for test files in 'dir' (default is 'test')
  -i file     Only include that file 
  -x file     Exclude that file
  -a          Use ASCII instead of 'box-drawing' characters 
  -v          Be verbose
  -q          Be completely quiet

The -i and -x options may appear multiple times.
* . cr bye ;

"test" var, test-folder
{
  "-h" : ' .help ,
  "-q" : ( test:quiet on test:verbose off ) ,
  "-v" : ( test:quiet off test:verbose on ) ,
  "-x" : ( excludes @ next-arg a:push drop ) ,
  "-f" : ( next-arg test-folder ! ) ,
  "-a" : ' test:no-box-chars  ,
  "-i" : ( includes @ next-arg a:push drop ) 
} var, opts

: normalize-file-names
  getcwd >r ( r@ f:relpath ) 
  a:map rdrop ;

: app:main
  \ handle CLI options
  opts @ process-args

  \ grab the test files and filter according to options:
  test-folder @ "/*" s:+ f:glob 
  normalize-file-names filter-files 

  \ run the test files and report if not quiet:
  test:run test:quiet? not if report then

  \ if any test failed, return 1 else 0
	test:failed a:len if 1 else 0 then
  die ;
