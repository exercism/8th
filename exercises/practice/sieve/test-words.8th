needs console/loaded

ns? var, current-namespace
ns: test

-1 var, test-count
var tests-passed
var tests-failed
var tests-skipped
true var, run-test

\ -------------------------------------------------------------------
\ utility methods

: test-passed  SED: s --
    1 tests-passed n:+!
    con:green con:onBlack . space " ... OK" . con:white con:onBlack cr
;

: test-skipped  SED: s --
    1 tests-skipped n:+!
    con:cyan con:onBlack . space " ... SKIPPED" . con:white con:onBlack cr
;

: test-failed  SED: s --
    1 tests-failed n:+!
    con:red con:onBlack . space " ... FAIL" . con:white con:onBlack cr
;

: isword?  SED: x -- x f
   dup >kind ns:w n:= 
;

: run-test?  SED: -- T
   run-test @ if true else "RUN_ALL_TESTS" getenv n:>bool then
;

\ Num passed + num skipped + num failed should == num tests
: all-tests-run?  SED: -- T
    tests-passed @ tests-skipped @ tests-failed @ n:+ n:+
    test-count @ n:=
;

\ Compare a1 to a2. Individual elements are compared with w (e.g., n:cmp).
\ The result n is:
\ - The first non-zero result of ( a1[i] a2[i] w ), or
\ - n:cmp of the lengths of a1 and a2
\ Note: This may be used in some test files. For example, to compare results
\ that are not required to be in a certain order.
: a:cmp  SED: a a w -- n
   >r
   over a:len nip over a:len nip n:cmp
   true mark -rot \ Stack: length-cmp a1 a2
   ( r@ w:exec nip dup if break else drop then ) a:2each
   rdrop \ Done with comparison word
   2drop \ Done with a1 and a2
   mark?
   !if \ Got a non-zero result from a compare
      nip
   then
;

\ -------------------------------------------------------------------
\ -------------------------------------------------------------------
\ Words to control testing and exit status

\ Initalize the testing, specify the number of tests we plan to run.
\ input: 
\   - n: number of tests planned
: begin  SED: n -- 
    test-count ! 
;

\ Set the variable that causes the rest of the tests to be skipped.
: skip-remaining  SED: --
    false run-test !
;

\ Set the exit status after testing is complete.
\   0 = all OK
\   1 = not all tests were run (some error occurred)
\   2 = some tests failed
: end  SED: --
    all-tests-run?
    if
        tests-failed @ 0 n:= if 0 else 2 then
    else
        1
    then
    die
;

\ Print a summary of the tests run.
: .test-summary  SED: --
    con:white con:onBlack
    test-count @    . space "tests planned - " .
    tests-passed @  . space "passed - " .
    tests-skipped @ . space "skipped - " .
    tests-failed @  . space "failed" . cr
;

\ Print an error if the number of tests run was not the expected number.
: .errors  SED: --
    all-tests-run?  
    !if
        con:red con:onBlack
        "... FAIL - not all tests completed" . cr
        con:white con:onBlack
    then
;

\ -------------------------------------------------------------------
\ -------------------------------------------------------------------
\ Words to determine pass/fail for tests

\ Assertion to test if two numbers are equal.
\ input: 
\   - s: test name 
\   - n: expected value
\   - w: word to produce actual value
: n=  SED: s n w -- | s w n --
    run-test? !if 2drop test-skipped ;; then
    isword? !if swap then
    w:exec
    n:=
    if test-passed else test-failed then 
;

\ Assertion to test if two strings are equal.
\ input: 
\   - s: test name 
\   - s: expected value
\   - w: word to produce actual value
: s=  SED: s s w -- | s w s -- 
    run-test? !if 2drop test-skipped ;; then
    isword? !if swap then
    w:exec
    s:=
    if test-passed else test-failed then 
;

\ Assertion to test if the result is true.
\ input: 
\   - s: test name 
\   - w: word to produce actual value
: true?  SED: s w --
    run-test? !if drop test-skipped ;; then
    w:exec
    if test-passed else test-failed then 
;

\ Assertion to test if the result is false.
\ input: 
\   - s: test name 
\   - w: word to produce actual value
: false?  SED: s w --
    run-test? !if drop test-skipped ;; then
    w:exec
    if test-failed else test-passed then 
;

\ Assertion to test if the result is null.
\ input: 
\   - s: test name 
\   - w: word to produce actual value
: null?  SED: s w --
    run-test? !if drop test-skipped ;; then
    w:exec
    G:null? nip
    if test-passed else test-failed then 
;

\ Compare arrays by testing elements with numeric equality.
\ input: 
\   - s: test name 
\   - a: expected value
\   - w: word to produce actual value
: a<n>=  SED: s a w -- | s w a -- 
    run-test? !if 2drop test-skipped ;; then
    isword? !if swap then
    w:exec
    ' n:= a:= 2nip
    if test-passed else test-failed then 
;

\ Compare arrays by testing elements with string equality.
\ input: 
\   - s: test name 
\   - a: expected value
\   - w: word to produce actual value
: a<s>=  SED: s a w -- | s w a -- 
    run-test? !if 2drop test-skipped ;; then
    isword? !if swap then
    w:exec
    ' s:= a:= 2nip
    if test-passed else test-failed then 
;

\ Test that array a is equal to the result of word w. Compare arrays by
\ testing elements with array equality. The SED of w is -- a1, where a1
\ is an array of arrays. The elements of each sub-array must be numbers.
\ input: 
\   - s: test name 
\   - a: expected value
\   - w: word to produce actual value
: a<a<n>>= SED: s a w -- | s w a -- 
    run-test? !if 2drop test-skipped ;; then
    isword? !if swap then
    w:exec
    .s
    ( ' n:= a:= nip nip ) a:= nip nip
    if test-passed else test-failed then 
;

\ Assertion to test if two maps are equal. 
\ The map values will be tested for numeric equality.
\ input: 
\   - s: test name 
\   - m: expected value
\   - w: word to produce actual value
: m<n>=  SED: s m w -- | s w m -- 
    run-test? !if 2drop test-skipped ;; then
    isword? !if swap then
    w:exec
    ' n:= m:= 2nip
    if test-passed else test-failed then 
;

\ -------------------------------------------------------------------
\ -------------------------------------------------------------------
\ set up "onexit" callbacks to report results

' .errors onexit
' .test-summary onexit

current-namespace @ ns
