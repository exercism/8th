import {unitt}!
import {src/meetup}!

suite "Meetup" [
: >date-only \ d -- d
    d:/ 0 3 a:slice [0, 0, 0, 0, 0, 0, 0] a:+ d:join
;    
    test.skip "when teenth Monday is the 13th, the first day of the teenth week" [
        result: dateOnly 2013 5 "Monday" "teenth" meetup
        assert -> [2013, 05, 13, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Monday is the 19th, the last day of the teenth week" [
        result: dateOnly 2013 8 "Monday" "teenth" meetup
        assert -> [2013, 08, 19, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Monday is some day in the middle of the teenth week" [
        result: dateOnly 2013 9 "Monday" "teenth" meetup
        assert -> [2013, 09, 16, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Tuesday is the 19th, the last day of the teenth week" [
        result: dateOnly 2013 3 "Tuesday" "teenth" meetup
        assert -> [2013, 03, 19, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Tuesday is some day in the middle of the teenth week" [
        result: dateOnly 2013 4 "Tuesday" "teenth" meetup
        assert -> [2013, 04, 16, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Tuesday is the 13th, the first day of the teenth week" [
        result: dateOnly 2013 8 "Tuesday" "teenth" meetup
        assert -> [2013, 08, 13, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Wednesday is some day in the middle of the teenth week" [
        result: dateOnly 2013 1 "Wednesday" "teenth" meetup
        assert -> [2013, 01, 16, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Wednesday is the 13th, the first day of the teenth week" [
        result: dateOnly 2013 2 "Wednesday" "teenth" meetup
        assert -> [2013, 02, 13, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Wednesday is the 19th, the last day of the teenth week" [
        result: dateOnly 2013 6 "Wednesday" "teenth" meetup
        assert -> [2013, 06, 19, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Thursday is some day in the middle of the teenth week" [
        result: dateOnly 2013 5 "Thursday" "teenth" meetup
        assert -> [2013, 05, 16, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Thursday is the 13th, the first day of the teenth week" [
        result: dateOnly 2013 6 "Thursday" "teenth" meetup
        assert -> [2013, 06, 13, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Thursday is the 19th, the last day of the teenth week" [
        result: dateOnly 2013 9 "Thursday" "teenth" meetup
        assert -> [2013, 09, 19, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Friday is the 19th, the last day of the teenth week" [
        result: dateOnly 2013 4 "Friday" "teenth" meetup
        assert -> [2013, 04, 19, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Friday is some day in the middle of the teenth week" [
        result: dateOnly 2013 8 "Friday" "teenth" meetup
        assert -> [2013, 08, 16, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Friday is the 13th, the first day of the teenth week" [
        result: dateOnly 2013 9 "Friday" "teenth" meetup
        assert -> [2013, 09, 13, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Saturday is some day in the middle of the teenth week" [
        result: dateOnly 2013 2 "Saturday" "teenth" meetup
        assert -> [2013, 02, 16, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Saturday is the 13th, the first day of the teenth week" [
        result: dateOnly 2013 4 "Saturday" "teenth" meetup
        assert -> [2013, 04, 13, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Saturday is the 19th, the last day of the teenth week" [
        result: dateOnly 2013 10 "Saturday" "teenth" meetup
        assert -> [2013, 10, 19, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Sunday is the 19th, the last day of the teenth week" [
        result: dateOnly 2013 5 "Sunday" "teenth" meetup
        assert -> [2013, 05, 19, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Sunday is some day in the middle of the teenth week" [
        result: dateOnly 2013 6 "Sunday" "teenth" meetup
        assert -> [2013, 06, 16, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when teenth Sunday is the 13th, the first day of the teenth week" [
        result: dateOnly 2013 10 "Sunday" "teenth" meetup
        assert -> [2013, 10, 13, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Monday is some day in the middle of the first week" [
        result: dateOnly 2013 3 "Monday" "first" meetup
        assert -> [2013, 03, 04, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Monday is the 1st, the first day of the first week" [
        result: dateOnly 2013 4 "Monday" "first" meetup
        assert -> [2013, 04, 01, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Tuesday is the 7th, the last day of the first week" [
        result: dateOnly 2013 5 "Tuesday" "first" meetup
        assert -> [2013, 05, 07, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Tuesday is some day in the middle of the first week" [
        result: dateOnly 2013 6 "Tuesday" "first" meetup
        assert -> [2013, 06, 04, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Wednesday is some day in the middle of the first week" [
        result: dateOnly 2013 7 "Wednesday" "first" meetup
        assert -> [2013, 07, 03, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Wednesday is the 7th, the last day of the first week" [
        result: dateOnly 2013 8 "Wednesday" "first" meetup
        assert -> [2013, 08, 07, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Thursday is some day in the middle of the first week" [
        result: dateOnly 2013 9 "Thursday" "first" meetup
        assert -> [2013, 09, 05, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Thursday is another day in the middle of the first week" [
        result: dateOnly 2013 10 "Thursday" "first" meetup
        assert -> [2013, 10, 03, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Friday is the 1st, the first day of the first week" [
        result: dateOnly 2013 11 "Friday" "first" meetup
        assert -> [2013, 11, 01, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Friday is some day in the middle of the first week" [
        result: dateOnly 2013 12 "Friday" "first" meetup
        assert -> [2013, 12, 06, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Saturday is some day in the middle of the first week" [
        result: dateOnly 2013 1 "Saturday" "first" meetup
        assert -> [2013, 01, 05, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Saturday is another day in the middle of the first week" [
        result: dateOnly 2013 2 "Saturday" "first" meetup
        assert -> [2013, 02, 02, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Sunday is some day in the middle of the first week" [
        result: dateOnly 2013 3 "Sunday" "first" meetup
        assert -> [2013, 03, 03, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Sunday is the 7th, the last day of the first week" [
        result: dateOnly 2013 4 "Sunday" "first" meetup
        assert -> [2013, 04, 07, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Monday is some day in the middle of the second week" [
        result: dateOnly 2013 3 "Monday" "second" meetup
        assert -> [2013, 03, 11, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Monday is the 8th, the first day of the second week" [
        result: dateOnly 2013 4 "Monday" "second" meetup
        assert -> [2013, 04, 08, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Tuesday is the 14th, the last day of the second week" [
        result: dateOnly 2013 5 "Tuesday" "second" meetup
        assert -> [2013, 05, 14, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Tuesday is some day in the middle of the second week" [
        result: dateOnly 2013 6 "Tuesday" "second" meetup
        assert -> [2013, 06, 11, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Wednesday is some day in the middle of the second week" [
        result: dateOnly 2013 7 "Wednesday" "second" meetup
        assert -> [2013, 07, 10, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Wednesday is the 14th, the last day of the second week" [
        result: dateOnly 2013 8 "Wednesday" "second" meetup
        assert -> [2013, 08, 14, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Thursday is some day in the middle of the second week" [
        result: dateOnly 2013 9 "Thursday" "second" meetup
        assert -> [2013, 09, 12, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Thursday is another day in the middle of the second week" [
        result: dateOnly 2013 10 "Thursday" "second" meetup
        assert -> [2013, 10, 10, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Friday is the 8th, the first day of the second week" [
        result: dateOnly 2013 11 "Friday" "second" meetup
        assert -> [2013, 11, 08, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Friday is some day in the middle of the second week" [
        result: dateOnly 2013 12 "Friday" "second" meetup
        assert -> [2013, 12, 13, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Saturday is some day in the middle of the second week" [
        result: dateOnly 2013 1 "Saturday" "second" meetup
        assert -> [2013, 01, 12, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Saturday is another day in the middle of the second week" [
        result: dateOnly 2013 2 "Saturday" "second" meetup
        assert -> [2013, 02, 09, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Sunday is some day in the middle of the second week" [
        result: dateOnly 2013 3 "Sunday" "second" meetup
        assert -> [2013, 03, 10, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when second Sunday is the 14th, the last day of the second week" [
        result: dateOnly 2013 4 "Sunday" "second" meetup
        assert -> [2013, 04, 14, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Monday is some day in the middle of the third week" [
        result: dateOnly 2013 3 "Monday" "third" meetup
        assert -> [2013, 03, 18, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Monday is the 15th, the first day of the third week" [
        result: dateOnly 2013 4 "Monday" "third" meetup
        assert -> [2013, 04, 15, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Tuesday is the 21st, the last day of the third week" [
        result: dateOnly 2013 5 "Tuesday" "third" meetup
        assert -> [2013, 05, 21, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Tuesday is some day in the middle of the third week" [
        result: dateOnly 2013 6 "Tuesday" "third" meetup
        assert -> [2013, 06, 18, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Wednesday is some day in the middle of the third week" [
        result: dateOnly 2013 7 "Wednesday" "third" meetup
        assert -> [2013, 07, 17, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Wednesday is the 21st, the last day of the third week" [
        result: dateOnly 2013 8 "Wednesday" "third" meetup
        assert -> [2013, 08, 21, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Thursday is some day in the middle of the third week" [
        result: dateOnly 2013 9 "Thursday" "third" meetup
        assert -> [2013, 09, 19, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Thursday is another day in the middle of the third week" [
        result: dateOnly 2013 10 "Thursday" "third" meetup
        assert -> [2013, 10, 17, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Friday is the 15th, the first day of the third week" [
        result: dateOnly 2013 11 "Friday" "third" meetup
        assert -> [2013, 11, 15, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Friday is some day in the middle of the third week" [
        result: dateOnly 2013 12 "Friday" "third" meetup
        assert -> [2013, 12, 20, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Saturday is some day in the middle of the third week" [
        result: dateOnly 2013 1 "Saturday" "third" meetup
        assert -> [2013, 01, 19, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Saturday is another day in the middle of the third week" [
        result: dateOnly 2013 2 "Saturday" "third" meetup
        assert -> [2013, 02, 16, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Sunday is some day in the middle of the third week" [
        result: dateOnly 2013 3 "Sunday" "third" meetup
        assert -> [2013, 03, 17, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when third Sunday is the 21st, the last day of the third week" [
        result: dateOnly 2013 4 "Sunday" "third" meetup
        assert -> [2013, 04, 21, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Monday is some day in the middle of the fourth week" [
        result: dateOnly 2013 3 "Monday" "fourth" meetup
        assert -> [2013, 03, 25, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Monday is the 22nd, the first day of the fourth week" [
        result: dateOnly 2013 4 "Monday" "fourth" meetup
        assert -> [2013, 04, 22, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Tuesday is the 28th, the last day of the fourth week" [
        result: dateOnly 2013 5 "Tuesday" "fourth" meetup
        assert -> [2013, 05, 28, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Tuesday is some day in the middle of the fourth week" [
        result: dateOnly 2013 6 "Tuesday" "fourth" meetup
        assert -> [2013, 06, 25, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Wednesday is some day in the middle of the fourth week" [
        result: dateOnly 2013 7 "Wednesday" "fourth" meetup
        assert -> [2013, 07, 24, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Wednesday is the 28th, the last day of the fourth week" [
        result: dateOnly 2013 8 "Wednesday" "fourth" meetup
        assert -> [2013, 08, 28, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Thursday is some day in the middle of the fourth week" [
        result: dateOnly 2013 9 "Thursday" "fourth" meetup
        assert -> [2013, 09, 26, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Thursday is another day in the middle of the fourth week" [
        result: dateOnly 2013 10 "Thursday" "fourth" meetup
        assert -> [2013, 10, 24, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Friday is the 22nd, the first day of the fourth week" [
        result: dateOnly 2013 11 "Friday" "fourth" meetup
        assert -> [2013, 11, 22, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Friday is some day in the middle of the fourth week" [
        result: dateOnly 2013 12 "Friday" "fourth" meetup
        assert -> [2013, 12, 27, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Saturday is some day in the middle of the fourth week" [
        result: dateOnly 2013 1 "Saturday" "fourth" meetup
        assert -> [2013, 01, 26, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Saturday is another day in the middle of the fourth week" [
        result: dateOnly 2013 2 "Saturday" "fourth" meetup
        assert -> [2013, 02, 23, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Sunday is some day in the middle of the fourth week" [
        result: dateOnly 2013 3 "Sunday" "fourth" meetup
        assert -> [2013, 03, 24, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when fourth Sunday is the 28th, the last day of the fourth week" [
        result: dateOnly 2013 4 "Sunday" "fourth" meetup
        assert -> [2013, 04, 28, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Monday in a month with four Mondays" [
        result: dateOnly 2013 3 "Monday" "last" meetup
        assert -> [2013, 03, 25, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Monday in a month with five Mondays" [
        result: dateOnly 2013 4 "Monday" "last" meetup
        assert -> [2013, 04, 29, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Tuesday in a month with four Tuesdays" [
        result: dateOnly 2013 5 "Tuesday" "last" meetup
        assert -> [2013, 05, 28, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Tuesday in another month with four Tuesdays" [
        result: dateOnly 2013 6 "Tuesday" "last" meetup
        assert -> [2013, 06, 25, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Wednesday in a month with five Wednesdays" [
        result: dateOnly 2013 7 "Wednesday" "last" meetup
        assert -> [2013, 07, 31, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Wednesday in a month with four Wednesdays" [
        result: dateOnly 2013 8 "Wednesday" "last" meetup
        assert -> [2013, 08, 28, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Thursday in a month with four Thursdays" [
        result: dateOnly 2013 9 "Thursday" "last" meetup
        assert -> [2013, 09, 26, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Thursday in a month with five Thursdays" [
        result: dateOnly 2013 10 "Thursday" "last" meetup
        assert -> [2013, 10, 31, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Friday in a month with five Fridays" [
        result: dateOnly 2013 11 "Friday" "last" meetup
        assert -> [2013, 11, 29, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Friday in a month with four Fridays" [
        result: dateOnly 2013 12 "Friday" "last" meetup
        assert -> [2013, 12, 27, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Saturday in a month with four Saturdays" [
        result: dateOnly 2013 1 "Saturday" "last" meetup
        assert -> [2013, 01, 26, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Saturday in another month with four Saturdays" [
        result: dateOnly 2013 2 "Saturday" "last" meetup
        assert -> [2013, 02, 23, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Sunday in a month with five Sundays" [
        result: dateOnly 2013 3 "Sunday" "last" meetup
        assert -> [2013, 03, 31, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Sunday in a month with four Sundays" [
        result: dateOnly 2013 4 "Sunday" "last" meetup
        assert -> [2013, 04, 28, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when last Wednesday in February in a leap year is the 29th" [
        result: dateOnly 2012 2 "Wednesday" "last" meetup
        assert -> [2012, 02, 29, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "last Wednesday in December that is also the last day of the year" [
        result: dateOnly 2014 12 "Wednesday" "last" meetup
        assert -> [2014, 12, 31, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when last Sunday in February in a non-leap year is not the 29th" [
        result: dateOnly 2015 2 "Sunday" "last" meetup
        assert -> [2015, 02, 22, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]

    test.skip "when first Friday is the 7th, the last day of the first week" [
        result: dateOnly 2012 12 "Friday" "first" meetup
        assert -> [2012, 12, 07, 0, 0, 0, 0, 0, 0, 0] d:join = result
    ]
]
