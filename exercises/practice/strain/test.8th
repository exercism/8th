
    test "keep on empty list returns empty list" [
        result: keep [] ( drop true )
        assert -> [] = result
    ]?


    test "keeps everything" [
        result: keep [1, 3, 5] ( drop true )
        assert -> [1, 3, 5] = result
    ]?

    test "keeps nothing" [
        result: keep [1, 3, 5] ( drop false )
        assert -> [] = result
    ]?

    test "keeps first and last" [
        result: keep [1, 2, 3] ( 2 n:mod 1 n:= )
        assert -> [1, 3] = result
    ]?

    test "keeps neither first nor last" [
        result: keep [1, 2, 3] ( 2 n:mod 0 n:= )
        assert -> [2] = result
    ]?

    test "keeps strings" [
        result: keep ["apple", "zebra", "banana", "zombies", "cherimoya", "zealot"] ( 0 s:@ nip 'z n:= )
        assert -> ["zebra", "zombies", "zealot"] = result
    ]?

    test "keeps lists" [
        result: keep [[1, 2, 3], [5, 5, 5], [5, 1, 2], [2, 1, 2], [1, 5, 2], [2, 2, 1], [1, 2, 5]] ( 5 ' n:= a:indexof nip number? nip )
        assert -> [[5, 5, 5], [5, 1, 2], [1, 5, 2], [1, 2, 5]] = result
    ]?

    test "discard on empty list returns empty list" [
        result: discard [] ( drop true )
        assert -> [] = result
    ]?

    test "discards everything" [
        result: discard [1, 3, 5] ( drop true )
        assert -> [] = result
    ]?

    test "discards nothing" [
        result: discard [1, 3, 5] ( drop false )
        assert -> [1, 3, 5] = result
    ]?

    test "discards first and last" [
        result: discard [1, 2, 3] ( 2 n:mod 1 n:= )
        assert -> [2] = result
    ]?

    test "discards neither first nor last" [
        result: discard [1, 2, 3] ( 2 n:mod 0 n:= )
        assert -> [1, 3] = result
    ]?

    test "discards strings" [
        result: discard ["apple", "zebra", "banana", "zombies", "cherimoya", "zealot"] ( 0 s:@ nip 'z n:= )
        assert -> ["apple", "banana", "cherimoya"] = result
    ]?

    test "discards lists" [
        result: discard [[1, 2, 3], [5, 5, 5], [5, 1, 2], [2, 1, 2], [1, 5, 2], [2, 2, 1], [1, 2, 5]] ( 5 ' n:= a:indexof nip number? nip )
        assert -> [[1, 2, 3], [2, 1, 2], [2, 2, 1]] = result
    ]?


