needs stack/rstack \ for G:rpick

: triplets-with-sum \ n -- a
  G:dup 0.5 n:^ n:int \ sqrt of sum
  a:new G:>r \ put empty results array on r-stack
  G:( \ loop 1..sqrt(max) as n
    G:>r \ push n to r-stack

    G:( \ loop n+1..sqrt(max) as m
      G:>r \ push m to r-stack

      1 G:rpick n:odd? 0 G:rpick n:odd? G:and G:!if \ both are not odd
        1 G:rpick 0 G:rpick n:gcd 1 n:= G:if \ are coprime
          0 G:rpick 2 n:^ 1 G:rpick 2 n:^ n:- \ m * m - n * n as a_
          2 0 G:rpick n:* 1 G:rpick n:* \ 2 * m * n as b_
          G:2dup n:> G:if G:swap G:then \ swap if a_ > b_
          0 G:rpick 2 n:^ 1 G:rpick 2 n:^ n:+ \ m * m + n * n as c_
          G:>r G:>r G:>r \ push 3 on r-stack in reverse order

          1 G:pick 0 G:rpick 1 G:rpick 2 G:rpick n:+ n:+ n:/mod swap \ sum.divmod(a_ + b_ + c_)
          0 n:= G:if \ if sum % (a_ + b_ + c_) = 0
            G:( \ loop 1..sum / (a_ + b_ + c_) as k
              G:>r \ push k on r-stack

              0 G:rpick 1 G:rpick n:* \ a_ * k as a
              0 G:rpick 2 G:rpick n:* \ b_ * k as b
              0 G:rpick 3 G:rpick n:* \ c_ * k as c
              G:3dup n:+ n:+ 5 G:pick n:= G:if \ a + b + c = sum
                3 a:close \ create array [a, b, c]
                6 G:rpick G:swap a:push' \ push it to the results array
              G:else
                G:3drop \ drop a, b, c otherwise
              G:then

              G:rdrop \ drop k from r-stack
            G:) 1 G:rot G:loop \ k loop
          G:else
            G:drop \ drop the sum / (a_ + b_ + c_)
          G:then

          G:rdrop G:rdrop G:rdrop \ drop a_, b_, c_ from r-stack
        G:then
      G:then

      G:rdrop \ drop m from r-stack
    G:) 0 G:rpick n:1+ 2 G:pick G:loop \ m loop

    G:rdrop \ drop n from r-stack
  G:) 1 2 G:pick G:loop \ n loop

  G:2drop \ drop sqrt of sum and sum
  G:r> \ pop results array from r-stack
;
