import {unitt}!
import {src/list-ops}!

suite "List Ops" [
    test "empty lists" [
        result: append [] []
    assert -> [] = result
    ]

    test.skip "list to empty list" [
        result: append [] [1, 2, 3, 4]
    assert -> [1, 2, 3, 4] = result
    ]

    test.skip "empty list to list" [
        result: append [1, 2, 3, 4] []
    assert -> [1, 2, 3, 4] = result
    ]

    test.skip "non-empty lists" [
        result: append [1, 2] [2, 3, 4, 5]
    assert -> [1, 2, 2, 3, 4, 5] = result
    ]

    test.skip "empty list" [
        result: concat []
    assert -> [] = result
    ]

    test.skip "list of lists" [
        result: concat [[1, 2], [3], [], [4, 5, 6]]
    assert -> [1, 2, 3, 4, 5, 6] = result
    ]

    test.skip "list of nested lists" [
        result: concat [[[1], [2]], [[3]], [[]], [[4, 5, 6]]]
    assert -> [[1], [2], [3], [], [4, 5, 6]] = result
    ]

: odd? \ n -- T
    2 n:/mod drop 1 n:=
;    
    test.skip "empty list" [
        result: filter [] ' odd?
        assert -> [] = result
    ]

    test.skip "non-empty list" [
        result: filter [1, 2, 3, 5] ' odd?
        assert -> [1, 3, 5] = result
    ]

    test.skip "empty list" [
        result: length []
    assert -> 0 = result
    ]

    test.skip "non-empty list" [
        result: length [1, 2, 3, 4]
    assert -> 4 = result
    ]

    test.skip "empty list" [
        result: map [] ' n:1+
        assert -> [] = result
    ]

    test.skip "non-empty list" [
        result: map [1, 3, 5, 7] ' n:1+
        assert -> [2, 4, 6, 8] = result
    ]

    test.skip "empty list" [
        result: foldl [] 2 ' n:*
        assert -> 2 = result
    ]

    test.skip "direction independent function applied to non-empty list" [
        result: foldl [1, 2, 3, 4] 5 ' n:+
        assert -> 15 = result
    ]

    test.skip "direction dependent function applied to non-empty list" [
        result: foldl [1, 2, 3, 4] 24 ( swap n:/ )
        assert -> 64 = result
    ]

    test.skip "empty list" [
        result: foldr [] 2 ' n:*
        assert -> 2 = result
    ]

    test.skip "direction independent function applied to non-empty list" [
        result: foldr [1, 2, 3, 4] 5 ' n:+
        assert -> 15 = result
    ]

    test.skip "direction dependent function applied to non-empty list" [
        result: foldr [1, 2, 3, 4] 24 ( swap n:/ )
        assert -> 9 = result
    ]

    test.skip "empty list" [
        result: reverse []
    assert -> [] = result
    ]

    test.skip "non-empty list" [
        result: reverse [1, 3, 5, 7]
    assert -> [7, 5, 3, 1] = result
    ]

    test.skip "list of lists is not flattened" [
        result: reverse [[1, 2], [3], [], [4, 5, 6]]
    assert -> [[4, 5, 6], [], [3], [1, 2]] = result
    ]
]
