needs console/loaded
con:onBlack

-1 var, test-count
var tests-passed
var tests-failed

: tests \ n -- 
    test-count ! 
;

: test-passed \ s --
    tests-passed @ n:1+ tests-passed !
    con:green . space " ... OK" . con:white cr
;

: test-failed \ s --
    tests-failed @ n:1+ tests-failed !
    con:red . space " ... FAIL" . con:white cr
;

: isword?  \ x -- x f
   dup  >kind  ns:w   n:= 
;

: test_eq \ s x w -- | s w x --
   isword? !if swap then
   w:exec
   n:=
   if test-passed else test-failed then 
;

: test_eqs \ s x w -- | s w x -- 
   isword? !if swap then
   w:exec
   s:=
   if test-passed else test-failed then 
;

: test_true \ s w --
   w:exec
   if test-passed else test-failed then 
;

: test_false \ s w --
   w:exec
   if test-failed else test-passed then 
;

: test_null \ s w --
   w:exec
   null?
   if test-passed else test-failed then 
;

\ compare arrays by testing elements with string equality
: test_eqa \ s x w -- | s w x -- 
   isword? !if swap then
   w:exec
   ' s:= a:= 2nip
   if test-passed else test-failed then 
;


: test_map_eq \ m m -- 
   isword? !if swap then
   w:exec
   ' n:= m:= 2nip
   if test-passed else test-failed then 
;

: test_map_neq \ m m -- 
   isword? !if swap then
   w:exec
   ' n:= m:= 2nip
   if test-failed else test-passed then 
;

: all-tests-run?
    tests-passed @ tests-failed @ n:+ test-count @ n:=
;

( all-tests-run?  
  !if con:red "... FAIL - not all tests completed" . con:white cr then
) onexit

\ Print a summary of the tests run
( con:white
  test-count   @ . space "tests planned - " .
  tests-passed @ . space "passed - " .
  tests-failed @ . space "failed" . cr
) onexit

\ Set the exit status to be the number of tests failed.
\ If no tests failed but not all the tests were run,
\ then use -1 as the exit status.
: end-of-tests
    tests-failed @
    dup 0 n:= if all-tests-run? if bye else -1 die then then
    die
;
